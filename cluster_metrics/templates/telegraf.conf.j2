[global_tags]
{% if inventory_hostname in groups['all_containers'] %}
  node_type = "container"
{% elif inventory_hostname in groups['hosts'] %}
  node_type = "physical_host"
{% endif %}

{%   set run_commands = [] %}
{%   for key, value in command_plugins.items() %}
{%     if value.when_group | bool and (value.group == inventory_hostname or inventory_hostname in value.group | default([])) %}
{%       set _ = run_commands.extend(value.command) %}
{%     endif %}
{%   endfor %}

{# The run_int adds padding to the interval so that plugins being added to the system have #}
{#  enough time to execute. Every added plugin will add 8 seconds to the interval with a #}
{#  default of 24. This value is later used as the flush interval which needs to be 2x the agent. #}
{% set run_int = run_commands | length %}
{% set interval = (run_int < 1 | ternary(0, run_int * 8)) + 24 %}

[agent]
  interval = "{{ interval | int }}s"
  round_interval = false
  metric_batch_size = 1024
  metric_buffer_limit = 10240
  collection_jitter = "8s"
  flush_interval = "{{ (interval | int) * 2 }}s"
  flush_jitter = "8s"
  precision = "s"
  debug = false
  quiet = true
{% if inventory_hostname in groups['all_containers'] %}
  hostname = "{{ ansible_hostname }}"
{% else %}
  hostname = "{{ inventory_hostname }}"
{% endif %}
  omit_hostname = false

[[outputs.influxdb]]
  urls = [{{ "\"http://%s\"" | format( ((influx_telegraf_targets) | map('quote') | join(',')) ) }}]
  database = "{{ influxdb_db_name }}"
  write_consistency = "any"
  timeout = "5s"

[[inputs.processes]]

[[inputs.system]]

{%   set run_commands = [] %}
{%   for key, value in command_plugins.items() %}
{%     if value.when_group | bool and (value.group == inventory_hostname or inventory_hostname in value.group | default([])) %}
{%       set _ = run_commands.extend(value.command) %}
{%     endif %}
{%   endfor %}

{%   if run_commands %}
[[inputs.exec]]
  commands = [{{ run_commands | map('quote') | join(',') }}]
  timeout = "{{ (run_commands | length) * 8 }}s"
  data_format = "influx"
{%   endif %}

{% if inventory_hostname in groups['all_containers'] %}
[[inputs.net]]
  ## By default, telegraf gathers stats from any up interface (excluding loopback)
  ## Setting interfaces will tell it to gather these explicit interfaces,
  ## regardless of status.
  ##
  interfaces = ["eth0"]

{% elif inventory_hostname in groups['hosts'] %}
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  fielddrop = ["time_*"]

[[inputs.net]]

[[inputs.netstat]]

[[inputs.disk]]
  ## By default, telegraf gather stats for all mountpoints.
  ## Setting mountpoints will restrict the stats to the specified mountpoints.
  mount_points = ["/"]
  ## Ignore some mountpoints by filesystem type. For example (dev)tmpfs (usually
  ## present on /run, /var/run, /dev/shm or /dev).
  ignore_fs = ["tmpfs", "devtmpfs"]

[[inputs.diskio]]
  ## By default, telegraf will gather stats for all devices including
  ## disk partitions.
  ## Setting devices will restrict the stats to the specified devices.
  devices = ["sda", "sdb"]
  ## Uncomment the following line if you need disk serial numbers.
  skip_serial_number = false
  
[[inputs.kernel]]

[[inputs.mem]]

[[inputs.swap]]

[[inputs.ping]]
## NOTE: this plugin forks the ping command. You may need to set capabilities
## via setcap cap_net_raw+p /bin/ping
#
## urls to ping
urls = ["www.google.com"] # required
## number of pings to send per collection (ping -c <COUNT>)
# count = 1
## interval, in s, at which to ping. 0 == default (ping -i <PING_INTERVAL>)
# ping_interval = 1.0
## per-ping timeout, in s. 0 == no timeout (ping -W <TIMEOUT>)
# timeout = 1.0
## interface to send ping from (ping -I <INTERFACE>)
# interface = ""

[[inputs.udp_listener]]
## Address and port to host UDP listener on
service_address = ":8092"
#
## Number of UDP messages allowed to queue up. Once filled, the
## UDP listener will start dropping packets.
allowed_pending_messages = 10000
#
## Data format to consume.
## Each data format has it's own unique set of configuration options, read
## more about them here:
## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
data_format = "influx"

{% endif %}

